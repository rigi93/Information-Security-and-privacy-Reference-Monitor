
INVBUFFER = []
PERBUFFER = []

class SecureFile():
  def __init__(self, file, filename):
    self.file = file
    self.filename = filename

  def readat(self, sizelimit, offset):
    return self.file.readat(sizelimit, offset)

  def writeat(self, data, offset):
    xyz = self.file.writeat(data, offset)
    read_str = self.file.readat(None, 0)
    log(read_str)
    if offset <= 2 and self.filename.startswith("private_"):   
# This not only prevents attacks from happening on INV but also on all strings starting from INV
      if read_str.startswith("INV"):
        INVBUFFER.append(self.filename)
        # remove the file from the PERBUFFER if it exists
        try:
          PERBUFFER.remove(self.filename)
        except ValueError:
          pass
# This not only prevents attacks from happening on PER but also on all strings starting from PER
      elif read_str.startswith("PER"):
        PERBUFFER.append(self.filename)
        # remove the file from the INVBUFFER if it exists
        try:
          INVBUFFER.remove(self.filename)
        except ValueError:
          pass 
# This prevents all possible combinations of writing PER and then deleting files
      elif read_str[:3] == "PER":
        INVBUFFER.append(self.filename)
        # remove the file from the PERBUFFER if it exists
        try:
          PERBUFFER.remove(self.filename)
        except ValueError:
          pass
# This prevents all possible INV combination for listfile attacks
      elif read_str[:3]	== "INV":
        if read_str.startswith("INV"):
          INVBUFFER.append(self.filename)
          # remove the file from the PERBUFFER if it exists
          try:
            PERBUFFER.remove(self.filename)
          except ValueError:
            pass
        	 
    return xyz
		
  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  file = openfile(filename, create)
  return SecureFile(file, filename)


def secure_removefile(filename):
  
  if filename in PERBUFFER:
    raise RepyArgumentError("Cannot delete this file!\n")
# This will disable the attacker from deleting a file who has PER in it and was created prior
  elif filename not in PERBUFFER and filename.startswith("private_"):
    var1 = openfile(filename, False)
    var2 = var1.readat(3,0)
    if var2 == "PER":
        raise RepyArgumentError("Cannot delete this file!\n")
    var1.close()
  removefile(filename)

def secure_listfiles():
  filelist = listfiles()
  returnlist = []
  for filename in filelist:
    if filename in INVBUFFER:
      continue
# This disables listing even if file not in INVBUFFER
    elif filename not in INVBUFFER and filename.startswith("private_"):
      var3 = openfile(filename, False)
      var4 = var3.readat(3,0)
      if var4 =="INV":	
        continue
    returnlist.append(filename)
  return returnlist


# The code here sets up type checking and variable hiding for you. You should not need to change anything below here.
sec_file_def = {
  "obj-type":SecureFile,
  "name":"SecureFile",
  "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
  "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(None),"target":SecureFile.writeat},
  "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
  }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc",
                                 "args":(str,bool),
                                 # any? why Exception in particular?
                                 "exceptions":Exception,
                                 "return":sec_file_def,
                                 "target":secure_openfile
                                }

CHILD_CONTEXT_DEF["listfiles"] = {"type":"func",
                                  "args":None,
                                  "return":list,
                                  "exceptions":"any",
                                  "target":secure_listfiles
                                 }

CHILD_CONTEXT_DEF["removefile"] = {"type":"func",
                                   "args":(str,),
                                   "return":None,
                                   "exceptions":"any",
                                   "target":secure_removefile
                                  }

# Execute the user code
secure_dispatch_module()

